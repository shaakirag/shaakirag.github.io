---
layout: post
title:  "ENCM 369"
date:   2022-04-11 18:02:46 -0600
categories: jekyll update
---
With `ENCM 369`, my goals were quite scattered. As someone very interested in computer architecture, I was looking forward to learning a lot about how computers worked, how to program in assembly, how to interface computers, and how memory worked. Looking back, I did not come up with these goals myself, but was excited to learn what the course description described. Still, I was glad that among hardcore electrical engineering courses this semester, there was a computer engineering course that focused on electronics and embedded programming. I was surprised to find that this course contained concepts I found to be more tangible than concepts in my other courses.

While I did learn the theory behind the concepts I wished to master, it was not in the way I expected. `ENCM 369` was more of a theoretical course for me despite the assignments and labs. The concepts seemed so vast in that they could be implemented differently depending on the situation. For example, what I learned about computer architecture was specifically for the AVR microcontroller. Although the concepts can be translated to any microcontroller, I would need to go back to the very basics, such as its byte-level addressing and how it organized its cache. For this, I also learned to use the data sheet very well, as that is what holds key information for any electronic component. However, I understood that this was the aim of the course; understanding the specifics of an electronic component and interfacing it based on its unique requirements is the essence of understanding computer architecture on a more general level. On a broader scale, this is also the **essence of what engineers do** – they **use what they know and apply it to new and different situations**, each sometimes requiring different tools to be used. For example, reading the datasheet for this 4-digit 7-segment display taught me how to multiplex over the pins so that each digit can display a different number. This further demonstrated to me that concepts I learned, even last semester, can be implemented easily as a software program.

{:style="text-align:center;"}
<img src="{{site.baseurl}}/assets/img/FIVE.png">

Fig 1: A diagram of the pins of the 4-digit 7-segment display that I had to multiplex
{:style="text-align:center;"}

From this experience, I learned that it is best to **focus on and use my strengths to my advantage**. I realized that I tend to focus on my weaknesses and try to improve those. However, while working in a team-based environment, I quickly noted that it is in my best interest as well as my group’s to complete tasks that I am good at, and to **learn from others to grow** in areas I am weak in. For example, I was not particularly good at foraging the data sheet while my lab teammate was. I was better at debugging the circuit and making sure the AVR connections were correct. If I were to extend this learning experience, I could translate it to the workplace. I can ask for work I am good at while completing training in areas that I am not as adept at to **work towards the team’s goals efficiently** and improving my technical aptitude at the same time.

Overall, my goals did match the course’s objectives in terms of the different concepts that I wanted to learn. I also gained a better understanding of how to **use my strengths in team-based settings** to efficiently work towards the team’s goals. For a future experience in the same field, I will use the skills I learned regarding embedded programming, microcontroller interfacing, and teamwork to effectively plan better designs and allocate tasks sufficiently.

